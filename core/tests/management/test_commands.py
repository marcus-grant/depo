# core/tests/management/test_commands.py
import os
from io import StringIO

from django.conf import settings
from django.core.management import call_command
from django.contrib.auth import get_user_model
from django.test import TestCase
from django.contrib.auth.hashers import check_password

User = get_user_model()


class CommandCreateSuperuserTests(TestCase):
    def setUp(self):
        # Ensure no superuser exists from previous tests.
        User.objects.all().delete()

    def test_create_superuser_command_with_hashed_password(self):
        """
        Test that create_superuser command will directly store a hashed password
        when a hashed password is provided via settings.
        """
        # Use a dummy hashed password value generated by Django's make_password.
        dummy_hashed_pwd = "pbkdf2_sha256$260000$dummySalt$dummyHashedValue"
        settings.SUPERUSER_NAME = "admin"
        settings.SUPERUSER_EMAIL = "admin@example.com"
        settings.SUPERUSER_PASS = dummy_hashed_pwd

        out = StringIO()
        call_command("create_superuser", stdout=out)
        output = out.getvalue()
        self.assertIn("created successfully", output)
        admin_user = User.objects.get(username="admin")
        # The stored password should be the exact same string as provided.
        self.assertEqual(admin_user.password, dummy_hashed_pwd)

    def test_create_superuser_command_with_plaintext_password(self):
        """
        Test that when a plaintext password is provided via settings, the user
        is created with a hashed version that correctly validates.
        """
        plaintext = "plaintextpassword"
        settings.SUPERUSER_NAME = "admin2"
        settings.SUPERUSER_EMAIL = "admin2@example.com"
        settings.SUPERUSER_PASS = plaintext

        out = StringIO()
        call_command("create_superuser", stdout=out)
        output = out.getvalue()
        self.assertIn("created successfully", output)
        admin_user = User.objects.get(username="admin2")
        # The stored password is not equal to the plaintext because it has been hashed.
        self.assertNotEqual(admin_user.password, plaintext)
        # Verify that the hashed password checks out.
        self.assertTrue(check_password(plaintext, admin_user.password))


class CommandHashPasswordTest(TestCase):
    def test_hash_password_command(self):
        """
        Test that the hash_password command properly outputs a hashed password.
        """
        out = StringIO()
        plaintext_pwd = "test_password"
        call_command("hash_password", plaintext_pwd, stdout=out)
        output = out.getvalue()
        # The output should include a hashed password line starting with a known prefix.
        lines = output.strip().splitlines()
        hashed = lines[-1].strip()
        self.assertTrue(
            hashed.startswith("pbkdf2_sha256$")
            or hashed.startswith("argon2$")
            or hashed.startswith("bcrypt$")
        )
        self.assertTrue(check_password(plaintext_pwd, hashed))
